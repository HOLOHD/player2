import r from"os";import o from"util";import{promises as e}from"fs";import{execFile as s}from"child_process";const t=o.promisify(s),a=r.homedir();(async()=>{let r={},o={};try{const s=await e.readFile(`${a}/player2.prev/package.json`);o=JSON.parse(s);const t=await e.readFile(`${a}/player2/package.json`);r=JSON.parse(t)}catch(r){throw new Error(`error reading package.json files, ${r}`)}console.log(`Upgraded from ${o.version}/${o.platform_version} to ${r.version}/${r.platform_version}`);const s=parseInt(o.version.replace(/\D/g,"")),i=parseInt(r.version.replace(/\D/g,""));console.log(`Start version: ${s}, End version: ${i}`);try{const r=(await e.readdir(`${a}/player2/shell-scripts/upgrade_scripts`)).map((r=>parseInt(r)));r.sort(((r,o)=>r-o)),console.log(r);for(const o of r)if(o>s&&o<=i){const r=`${a}/player2/shell-scripts/upgrade_scripts/${o}.sh`;console.log(`Executing shell script ${r}`);const{stdout:e,stderr:s}=await t(r);console.log(`stdout: ${e}`),console.log(`stderr: ${s}`)}}catch(r){console.log(`Error executing upgrade scripts for upgrade: ${r}`)}try{r.platform_version=o.platform_version||"NA",r.config_server=o.config_server||"pisignage.com",r.media_server=o.media_server||"pisignage.com",await e.writeFile(`${a}/player2/package.json`,JSON.stringify(r,null,4),"utf8"),console.log("*********platform version and config server restored********")}catch(r){console.log(`error writing platform version and config server in package.json, ${r}`)}})().then((()=>(console.log("*********** update_scripts execution complete *******************"),0))).catch((()=>{console.log("*********** Error: in execution of upgrade scripts **************")}));